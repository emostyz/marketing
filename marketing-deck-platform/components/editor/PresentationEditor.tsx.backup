'use client'
import React, { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase/client'
import { 
  Save, Download, Share2, ChevronLeft, ChevronRight, 
  Plus, Trash2, Edit3, BarChart3, Type, Image,
  Loader, Sparkles, FileText
} from 'lucide-react'
import SlideRenderer from './SlideRenderer'
import { Card } from '../ui/Card'
import { Button } from '../ui/Button'
import Modal from '../ui/Modal'
import { motion } from 'framer-motion'
import { updateDeckPlan, feedbackLoopDeckPlan } from '../../lib/openai/narrative-generator'
import dynamic from 'next/dynamic'
import { DndContext, closestCenter, PointerSensor, useSensor, useSensors } from '@dnd-kit/core'
import { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'
const TiptapEditor = dynamic(() => import('../ui/TiptapEditor')) as React.ComponentType<{ content: string; onUpdate: (html: string) => void }>

// AEDRIN PresentationEditor: World-class, multi-step, feedback-driven, executive-ready deck generation and editing flow.
// 1. Multi-step OpenAI prompt engineering: proposal, user review/edit, AI validation, feedback loop, final generation.
// 2. User can edit slides like PowerPoint: move, edit, delete, add text, charts, images; drag-and-drop elements; spreadsheet-like chart editing.
// 3. All changes are autosaved, undo/redo supported, and UI is Vercel-inspired, accessible, and executive-ready.
// 4. User and AI must both approve the plan before final deck generation.
// 5. All user feedback and AI validation is surfaced in the UI at every step.

export default function PresentationEditor({ presentation }: any) {
  const [slides, setSlides] = useState(presentation.slides || [])
  const [currentSlide, setCurrentSlide] = useState(0)
  const [isGenerating, setIsGenerating] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [showExport, setShowExport] = useState(false)
  const [aiStatus, setAiStatus] = useState<'idle' | 'generating' | 'done'>('idle')
  const [error, setError] = useState<string | null>(null)
  const [undoStack, setUndoStack] = useState<any[][]>([])
  const [redoStack, setRedoStack] = useState<any[][]>([])
  const [showRefineModal, setShowRefineModal] = useState(false)
  const [refineInput, setRefineInput] = useState('')
  const [refineLoading, setRefineLoading] = useState(false)
  const [refineError, setRefineError] = useState<string | null>(null)
  const [exportLoading, setExportLoading] = useState<'pptx' | 'gslides' | 'pdf' | null>(null)
  const [exportError, setExportError] = useState<string | null>(null)
  const [showSlideRefineModal, setShowSlideRefineModal] = useState(false)
  const [slideRefineInput, setSlideRefineInput] = useState('')
  const [slideRefineLoading, setSlideRefineLoading] = useState(false)
  const [slideRefineError, setSlideRefineError] = useState<string | null>(null)
  const [slideToRefine, setSlideToRefine] = useState<number | null>(null)
  const [slideRegenerateLoading, setSlideRegenerateLoading] = useState(false)
  const [slideSummarizeLoading, setSlideSummarizeLoading] = useState(false)
  const [slideSummary, setSlideSummary] = useState<string | null>(null)
  const [proposal, setProposal] = useState<string | null>(null)
  const [proposalEdit, setProposalEdit] = useState<string | null>(null)
  const [proposalApproved, setProposalApproved] = useState(false)
  const [validation, setValidation] = useState<any>(null)
  const [validationError, setValidationError] = useState<string | null>(null)
  const [showProposalModal, setShowProposalModal] = useState(false)
  const [showValidationModal, setShowValidationModal] = useState(false)
  const [editingChartIdx, setEditingChartIdx] = useState<number | null>(null)
  const [chartEditData, setChartEditData] = useState<any[]>([])
  const [editingElement, setEditingElement] = useState<{ slideIdx: number, elementIdx: number } | null>(null)
  const [elementEditValue, setElementEditValue] = useState<string>('')
  const [draggedElement, setDraggedElement] = useState<{ slideIdx: number, elementIdx: number } | null>(null)

  const sensors = useSensors(useSensor(PointerSensor))

  // Add undo/redo state
  const [history, setHistory] = useState<any[]>([])
  const [future, setFuture] = useState<any[]>([])

  const pushHistory = (newSlides: any[]) => {
    setHistory(prev => [...prev, slides])
    setFuture([])
  }
  const handleUndo = () => {
    if (history.length === 0) return
    const prev = history[history.length - 1]
    setFuture(f => [slides, ...f])
    setSlides(prev)
    setHistory(h => h.slice(0, h.length - 1))
  }
  const handleRedo = () => {
    if (future.length === 0) return
    const next = future[0]
    setHistory(h => [...h, slides])
    setSlides(next)
    setFuture(f => f.slice(1))
  }
  // Wrap all mutating actions to push to history
  const savePresentationWithHistory = (newSlides: any[]) => {
    pushHistory(newSlides)
    setSlides(newSlides)
    savePresentation(newSlides)
  }

  useEffect(() => {
    if (slides.length === 0 && presentation.template_id) {
      initializeFromTemplate()
    }
  }, [presentation])

  useEffect(() => {
    if (!proposal && slides.length === 0) {
      fetch('/api/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          step: 'proposal',
          dataSources: presentation.data_sources,
          questionnaire: presentation.questionnaire,
          goals: presentation.questionnaire?.goal,
          context: presentation.questionnaire?.context,
          keyQuestions: presentation.questionnaire?.keyQuestions,
          brand: presentation.brand,
          pptxStructure: presentation.pptxStructure,
          referenceSlides: presentation.referenceSlides,
          userEdits: presentation.userEdits,
          approvedPrompt: proposal,
        })
      })
        .then(res => res.json())
        .then(data => {
          setProposal(data.proposal)
          setShowProposalModal(true)
        })
    }
  }, [proposal, slides.length, presentation])

  const initializeFromTemplate = async () => {
    setIsGenerating(true)
    try {
      const response = await fetch('/api/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          step: 'generate',
          dataSources: presentation.data_sources,
          questionnaire: presentation.questionnaire,
          goals: presentation.questionnaire?.goal,
          context: presentation.questionnaire?.context,
          keyQuestions: presentation.questionnaire?.keyQuestions,
          brand: presentation.brand,
          pptxStructure: presentation.pptxStructure,
          referenceSlides: presentation.referenceSlides,
          userEdits: presentation.userEdits,
          approvedPrompt: proposal,
        })
      })
      const { slides: generatedSlides } = await response.json()
      setSlides(generatedSlides)
      await savePresentation(generatedSlides)
    } catch (error) {
      setError('Failed to generate slides. Please try again.')
    } finally {
      setIsGenerating(false)
    }
  }

  const savePresentation = async (slidesToSave = slides) => {
    setIsSaving(true)
    
    try {
      await supabase
        .from('presentations')
        .update({ 
          slides: slidesToSave,
          updated_at: new Date().toISOString()
        })
        .eq('id', presentation.id)
    } catch (error) {
      console.error('Error saving:', error)
    } finally {
      setIsSaving(false)
    }
  }

  const regenerateNarrative = async (slideIndex: number) => {
    setIsGenerating(true)
    
    try {
      const slide = slides[slideIndex]
      // Call your AI API here to regenerate narrative
      const newNarrative = "AI-generated narrative would appear here after connecting to OpenAI"
      
      const updatedSlides = [...slides]
      updatedSlides[slideIndex] = {
        ...slide,
        narrative: newNarrative
      }
      
      setSlides(updatedSlides)
      await savePresentation(updatedSlides)
    } catch (error) {
      console.error('Error regenerating narrative:', error)
    } finally {
      setIsGenerating(false)
    }
  }

  const addSlide = (type: string) => {
    const newSlide = {
      id: Date.now(),
      type,
      title: 'New Slide',
      content: {},
      narrative: ''
    }
    
    const updatedSlides = [...slides]
    updatedSlides.splice(currentSlide + 1, 0, newSlide)
    setSlides(updatedSlides)
    setCurrentSlide(currentSlide + 1)
  }

  const deleteSlide = (index: number) => {
    const updatedSlides = slides.filter((_: any, i: number) => i !== index)
    setSlides(updatedSlides)
    if (currentSlide >= updatedSlides.length) {
      setCurrentSlide(Math.max(0, updatedSlides.length - 1))
    }
  }

  const handleEditSlide = (index: number, field: string, value: string) => {
    setUndoStack([...undoStack, slides])
    setRedoStack([])
    const updatedSlides = slides.map((slide: any, i: number) =>
      i === index ? { ...slide, [field]: value } : slide
    )
    setSlides(updatedSlides)
    savePresentation(updatedSlides)
  }

  const handleRefineDeck = async () => {
    setRefineLoading(true)
    setRefineError(null)
    try {
      const updatedPlan = await updateDeckPlan({
        currentPlan: slides,
        userEdit: refineInput,
        goals: presentation.questionnaire?.goal,
        context: presentation.questionnaire?.context,
        keyQuestions: presentation.questionnaire?.keyQuestions,
      })
      setSlides(updatedPlan)
      await savePresentation(updatedPlan)
      setShowRefineModal(false)
      setRefineInput('')
    } catch (e: any) {
      setRefineError(e.message || 'Failed to refine deck.')
    } finally {
      setRefineLoading(false)
    }
  }

  const exportPresentation = async (type: 'pptx' | 'gslides' | 'pdf' = 'pptx') => {
    setExportLoading(type)
    setExportError(null)
    try {
      const endpoint =
        type === 'pptx' ? '/api/export' :
        type === 'gslides' ? '/api/export/gslides' :
        '/api/export/pdf'
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ presentationId: presentation.id })
      })
      if (!response.ok) throw new Error('Export failed')
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${presentation.title}.${type === 'pptx' ? 'pptx' : type === 'gslides' ? 'gslides' : 'pdf'}`
      a.click()
    } catch (e: any) {
      setExportError(e.message || 'Export failed')
    } finally {
      setExportLoading(null)
    }
  }

  const handleSlideRefine = async () => {
    if (slideToRefine == null) return
    setSlideRefineLoading(true)
    setSlideRefineError(null)
    try {
      const updatedSlides = [...slides]
      const updated = await updateDeckPlan({
        currentPlan: [slides[slideToRefine]],
        userEdit: slideRefineInput,
        goals: presentation.questionnaire?.goal,
        context: presentation.questionnaire?.context,
        keyQuestions: presentation.questionnaire?.keyQuestions,
      })
      updatedSlides[slideToRefine] = { ...updated[0], id: slides[slideToRefine].id }
      setSlides(updatedSlides)
      await savePresentation(updatedSlides)
      setShowSlideRefineModal(false)
      setSlideRefineInput('')
      setSlideToRefine(null)
    } catch (e: any) {
      setSlideRefineError(e.message || 'Failed to refine slide.')
    } finally {
      setSlideRefineLoading(false)
    }
  }

  const handleSlideRegenerate = async (slideIdx: number) => {
    setSlideRegenerateLoading(true)
    try {
      const updated = await updateDeckPlan({
        currentPlan: [slides[slideIdx]],
        userEdit: 'Regenerate narrative',
        goals: presentation.questionnaire?.goal,
        context: presentation.questionnaire?.context,
        keyQuestions: presentation.questionnaire?.keyQuestions,
      })
      const updatedSlides = [...slides]
      updatedSlides[slideIdx] = { ...updatedSlides[slideIdx], narrative: updated[0]?.narrative || '' }
      setSlides(updatedSlides)
    } catch (e) {
      // handle error
    } finally {
      setSlideRegenerateLoading(false)
    }
  }

  const handleSlideSummarize = async (slideIdx: number) => {
    setSlideSummarizeLoading(true)
    try {
      // Call OpenAI or backend to summarize
      const res = await fetch('/api/summarize', { method: 'POST', body: JSON.stringify({ slide: slides[slideIdx] }) })
      const { summary } = await res.json()
      setSlideSummary(summary)
    } catch (e) {
      setSlideSummary('Error summarizing slide.')
    } finally {
      setSlideSummarizeLoading(false)
    }
  }

  const handleApproveProposal = async () => {
    setProposalApproved(true)
    setShowProposalModal(false)
    // Proceed to generate deck
    await handleGenerateDeck()
  }

  const handleEditProposal = () => {
    setProposalEdit(proposal)
  }

  const handleSubmitProposalEdit = async () => {
    setProposal(proposalEdit)
    setProposalEdit(null)
  }

  const handleGenerateDeck = async () => {
    setIsGenerating(true)
    setValidation(null)
    setValidationError(null)
    try {
      const res = await fetch('/api/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          step: 'generate',
          dataSources: presentation.data_sources,
          questionnaire: presentation.questionnaire,
          goals: presentation.questionnaire?.goal,
          context: presentation.questionnaire?.context,
          keyQuestions: presentation.questionnaire?.keyQuestions,
          brand: presentation.brand,
          pptxStructure: presentation.pptxStructure,
          referenceSlides: presentation.referenceSlides,
          userEdits: presentation.userEdits,
          approvedPrompt: proposal,
        })
      })
      const data = await res.json()
      if (data.error && data.feedback) {
        setValidation(data.feedback)
        setShowValidationModal(true)
        setIsGenerating(false)
        return
      }
      setSlides(data.slides)
      setValidation(data.validation)
      setShowValidationModal(false)
      setIsGenerating(false)
    } catch (e) {
      setValidationError('Failed to generate deck.')
      setIsGenerating(false)
    }
  }

  function DraggableSlide({ slide, index, active, onClick }: any) {
    const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id: slide.id })
    return (
      <Card
        ref={setNodeRef}
        style={{
          transform: CSS.Transform.toString(transform),
          transition,
          opacity: isDragging ? 0.5 : 1,
          outline: active ? '2px solid #3B82F6' : undefined,
          cursor: 'grab',
        }}
        onClick={onClick}
        onKeyDown={e => {
          if (listeners && listeners.onKeyDown) listeners.onKeyDown(e)
        }}
        {...attributes}
        {...listeners}
        className="flex items-center gap-2 px-2 py-1 mb-2 bg-[#23242b] border border-[#23242b] rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        <span className="cursor-grab text-blue-400" aria-label="Drag handle" tabIndex={-1}>≡</span>
        <span className="truncate flex-1">{slide.title || 'Untitled'}</span>
      </Card>
    )
  }

  // Handler to start editing an element
  const handleEditElement = (slideIdx: number, elementIdx: number, value: string) => {
    setEditingElement({ slideIdx, elementIdx })
    setElementEditValue(value)
  }
  const handleSaveElementEdit = () => {
    if (!editingElement) return
    const { slideIdx, elementIdx } = editingElement
    const updatedSlides = [...slides]
    updatedSlides[slideIdx].elements[elementIdx].text = elementEditValue
    setSlides(updatedSlides)
    setEditingElement(null)
    setElementEditValue('')
    savePresentationWithHistory(updatedSlides)
  }
  const handleDeleteElement = (slideIdx: number, elementIdx: number) => {
    const updatedSlides = [...slides]
    updatedSlides[slideIdx].elements.splice(elementIdx, 1)
    setSlides(updatedSlides)
    savePresentationWithHistory(updatedSlides)
  }
  const handleAddElement = (slideIdx: number, type: 'text' | 'chart' | 'image') => {
    const updatedSlides = [...slides]
    if (!updatedSlides[slideIdx].elements) updatedSlides[slideIdx].elements = []
    if (type === 'text') {
      updatedSlides[slideIdx].elements.push({ type: 'text', text: 'New text' })
    } else if (type === 'chart') {
      updatedSlides[slideIdx].elements.push({ type: 'chart', chartData: [{ label: 'A', value: 1 }, { label: 'B', value: 2 }] })
    } else if (type === 'image') {
      updatedSlides[slideIdx].elements.push({ type: 'image', url: '' })
    }
    setSlides(updatedSlides)
    savePresentationWithHistory(updatedSlides)
  }
  const handleDragElementStart = (slideIdx: number, elementIdx: number) => {
    setDraggedElement({ slideIdx, elementIdx })
  }
  const handleDropElement = (slideIdx: number, targetIdx: number) => {
    if (!draggedElement) return
    const updatedSlides = [...slides]
    const [moved] = updatedSlides[slideIdx].elements.splice(draggedElement.elementIdx, 1)
    updatedSlides[slideIdx].elements.splice(targetIdx, 0, moved)
    setSlides(updatedSlides)
    setDraggedElement(null)
    savePresentationWithHistory(updatedSlides)
  }
  // Chart data editing
  const handleEditChartData = (slideIdx: number, elementIdx: number, chartData: any[]) => {
    const updatedSlides = [...slides]
    updatedSlides[slideIdx].elements[elementIdx].chartData = chartData
    setSlides(updatedSlides)
    savePresentationWithHistory(updatedSlides)
  }

  // Add keyboard shortcuts for undo/redo, add slide, delete, etc.
  useEffect(() => {
    const handler = (e: KeyboardEvent) => {
      if (e.ctrlKey && e.key === 'z') handleUndo()
      if (e.ctrlKey && e.key === 'y') handleRedo()
      if (e.ctrlKey && e.key === 'n') handleAddElement(currentSlide, 'text')
      if (e.ctrlKey && e.key === 'd') handleDeleteElement(currentSlide, 0) // Example: delete first element
    }
    window.addEventListener('keydown', handler)
    return () => window.removeEventListener('keydown', handler)
  }, [currentSlide, slides])

  const [feedbacks, setFeedbacks] = useState<string[]>([])
  const [feedbackInput, setFeedbackInput] = useState('')
  const [feedbackLoading, setFeedbackLoading] = useState(false)

  const sendFeedbackAnalytics = async (payload: any) => {
    try {
      await fetch('/api/feedback', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
    } catch (e) { /* ignore */ }
  }

  // Feedback loop handler
  const handleFeedbackSubmit = async () => {
    if (!feedbackInput.trim() || feedbacks.length >= 20) return
    setFeedbackLoading(true)
    try {
      const newFeedbacks = [...feedbacks, feedbackInput.trim()]
      setFeedbacks(newFeedbacks)
      // Call backend feedback loop (could be via API route or direct import)
      const refinedPlan = await feedbackLoopDeckPlan({
        initialPlan: slides,
        feedbacks: newFeedbacks,
        goals: presentation.questionnaire?.goal,
        context: presentation.questionnaire?.context,
        keyQuestions: presentation.questionnaire?.keyQuestions,
      })
      setSlides(refinedPlan)
      setFeedbackInput('')
      sendFeedbackAnalytics({ type: 'deck-feedback', feedback: feedbackInput, round: feedbacks.length + 1, presentationId: presentation.id })
    } catch (e) {
      // handle error
    } finally {
      setFeedbackLoading(false)
    }
  }

  const [slideRatings, setSlideRatings] = useState<{ [slideId: string]: { score: number, comment: string }[] }>({})

  const handleRateSlide = (slideIdx: number, score: number, comment: string) => {
    const slideId = slides[slideIdx]?.id
    if (!slideId) return
    setSlideRatings(prev => ({
      ...prev,
      [slideId]: [...(prev[slideId] || []), { score, comment }]
    }))
    sendFeedbackAnalytics({ slideId, score, comment, presentationId: presentation.id })
  }

  if (isGenerating && slides.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <Loader className="w-12 h-12 animate-spin mx-auto mb-4 text-blue-600" />
          <h3 className="text-xl font-semibold mb-2">Generating Your Presentation</h3>
          <p className="text-gray-600">AI is analyzing your data and creating slides...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen w-full bg-[#101014]">
      {/* Sidebar */}
      <aside className="w-72 bg-[#181A20] border-r border-[#23242b] p-6 flex flex-col gap-4">
        <h2 className="text-2xl font-grotesk font-bold mb-6">Slides</h2>
        <DndContext
          sensors={sensors}
          collisionDetection={closestCenter}
          onDragEnd={e => {
            const { active, over } = e
            if (active && over && active.id !== over.id) {
              const oldIndex = slides.findIndex((s: any) => s.id === active.id)
              const newIndex = slides.findIndex((s: any) => s.id === over.id)
              const newSlides = arrayMove(slides, oldIndex, newIndex)
              setSlides(newSlides)
              savePresentationWithHistory(newSlides)
            }
          }}
        >
          <SortableContext items={slides.map((s: any) => s.id)} strategy={verticalListSortingStrategy}>
            {slides.length === 0 ? (
              <Card className="p-3 text-blue-300">No slides yet. Click 'AI Generate' to create slides.</Card>
            ) : (
              slides.map((slide: any, i: number) => (
                <DraggableSlide key={slide.id} slide={slide} index={i} active={slide.id} onClick={() => setCurrentSlide(i)} />
              ))
            )}
          </SortableContext>
        </DndContext>
        <Button variant="default" className="mt-8" onClick={initializeFromTemplate} disabled={isGenerating}>
          {isGenerating ? 'Generating...' : 'AI Generate'}
        </Button>
        <div className="flex gap-2 mb-4">
          <Button size="sm" variant="secondary" onClick={handleUndo} disabled={history.length === 0}>Undo</Button>
          <Button size="sm" variant="secondary" onClick={handleRedo} disabled={future.length === 0}>Redo</Button>
        </div>
        <Button variant="secondary" className="mt-4" onClick={() => setShowRefineModal(true)}>
          Refine Deck with AI
        </Button>
      </aside>

      {/* Slide Thumbnails Navigation */}
      <div className="fixed left-72 top-0 h-full w-24 bg-[#181A20] border-r border-[#23242b] flex flex-col items-center py-8 z-30">
        {slides.map((slide: any, i: number) => (
          <div key={slide.id} className={`w-16 h-10 mb-2 rounded-lg border-2 ${currentSlide === i ? 'border-blue-500' : 'border-[#23242b]'} bg-[#23242b] flex items-center justify-center cursor-pointer`} onClick={() => setCurrentSlide(i)} aria-label={`Go to slide ${i+1}`}>{i+1}</div>
        ))}
      </div>

      {/* Contextual Help Button */}
      <Button variant="ghost" aria-label="Help" onClick={() => {/* open help modal */}} className="fixed top-4 right-4 z-50">❓</Button>

      {/* Presentation Mode Button */}
      <Button variant="default" className="fixed top-4 left-1/2 -translate-x-1/2 z-50" onClick={() => {/* open presentation mode */}} aria-label="Presentation Mode">�� Present</Button>

      {/* Main Editor */}
      <main className="flex-1 flex flex-col items-center justify-center p-12 relative">
        <div className="fixed top-8 left-1/2 -translate-x-1/2 z-30 bg-[#181A20] border border-[#23242b] rounded-xl px-8 py-3 flex gap-4 shadow-lg">
          <Button variant="secondary" onClick={() => setShowExport(true)}>Export</Button>
        </div>

        <div className="w-[720px] h-[420px] bg-[#181A20] border border-[#23242b] rounded-2xl shadow-lg flex flex-col items-center justify-center mt-24 p-6">
          {isGenerating && slides.length === 0 ? (
            <div className="text-center text-blue-300">Generating your presentation...</div>
          ) : error ? (
            <div className="text-red-400">{error}</div>
          ) : slides.length === 0 ? (
            <div className="text-blue-400">No slides to display.</div>
          ) : (
            <>
              <input
                className="w-full text-2xl font-bold mb-2 bg-transparent text-white border-b border-blue-500 focus:outline-none"
                value={slides[currentSlide]?.title || ''}
                onChange={e => handleEditSlide(currentSlide, 'title', e.target.value)}
              />
              <div className="w-full mb-2">
                <TiptapEditor
                  content={slides[currentSlide]?.narrative || ''}
                  onUpdate={(html: string) => handleEditSlide(currentSlide, 'narrative', html)}
                />
              </div>
              <SlideRenderer
                slide={{ ...slides[currentSlide], avgRating: slideRatings[slides[currentSlide]?.id]?.length ? slideRatings[slides[currentSlide]?.id].reduce((a, b) => a + b.score, 0) / slideRatings[slides[currentSlide]?.id].length : undefined }}
                data={presentation.data_sources}
                onChange={(newData: any) => handleEditSlide(currentSlide, 'data', newData)}
                onRate={(score: number, comment: string) => handleRateSlide(currentSlide, score, comment)}
              />
              <Button variant="ghost" className="mb-2" onClick={() => { setShowSlideRefineModal(true); setSlideToRefine(currentSlide) }}>Improve with AI</Button>
            </>
          )}
        </div>

        {/* Export Modal */}
        <Modal open={showExport} onClose={() => setShowExport(false)}>
          <div className="text-white font-grotesk text-xl mb-4">Export Presentation</div>
          {exportError && <div className="text-red-400 mb-2">{exportError}</div>}
          <Button variant="default" className="mb-2" onClick={() => exportPresentation('pptx')} disabled={exportLoading === 'pptx'}>
            {exportLoading === 'pptx' ? 'Exporting...' : 'Export to PowerPoint'}
          </Button>
          <Button variant="secondary" className="mb-2" onClick={() => exportPresentation('gslides')} disabled={exportLoading === 'gslides'}>
            {exportLoading === 'gslides' ? 'Exporting...' : 'Export to Google Slides'}
          </Button>
          <Button variant="ghost" onClick={() => exportPresentation('pdf')} disabled={exportLoading === 'pdf'}>
            {exportLoading === 'pdf' ? 'Exporting...' : 'Export to PDF'}
          </Button>
        </Modal>
        {/* Refine Deck Modal */}
        <Modal open={showRefineModal} onClose={() => setShowRefineModal(false)}>
          <div className="text-white font-grotesk text-xl mb-4">Refine Deck with AI</div>
          <textarea
            className="w-full min-h-[80px] bg-[#23242b] text-white rounded-lg p-3 mb-2 border border-[#23242b] focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={refineInput}
            onChange={e => setRefineInput(e.target.value)}
            placeholder="Describe what you want to change, e.g. 'Add a slide about Q2 revenue trends', 'Make the executive summary more concise', etc."
          />
          {refineError && <div className="text-red-400 mb-2">{refineError}</div>}
          <Button variant="default" className="w-full" onClick={handleRefineDeck} disabled={refineLoading || !refineInput}>
            {refineLoading ? 'Refining...' : 'Apply AI Refinement'}
          </Button>
        </Modal>
        {/* Slide Refine Modal */}
        <Modal open={showSlideRefineModal} onClose={() => setShowSlideRefineModal(false)}>
          <div className="text-white font-grotesk text-xl mb-4">Improve Slide with AI</div>
          <textarea
            className="w-full min-h-[80px] bg-[#23242b] text-white rounded-lg p-3 mb-2 border border-[#23242b] focus:outline-none focus:ring-2 focus:ring-blue-500"
            value={slideRefineInput}
            onChange={e => setSlideRefineInput(e.target.value)}
            placeholder="Describe what you want to improve, e.g. 'Make the summary more concise', 'Add a key insight', etc."
          />
          {slideRefineError && <div className="text-red-400 mb-2">{slideRefineError}</div>}
          <Button variant="default" className="w-full" onClick={handleSlideRefine} disabled={slideRefineLoading || !slideRefineInput}>
            {slideRefineLoading ? 'Refining...' : 'Apply AI Improvement'}
          </Button>
        </Modal>
        {showProposalModal && proposal && (
          <Modal open={showProposalModal} onClose={() => setShowProposalModal(false)}>
            <div className="text-white font-grotesk text-xl mb-4">AI-Generated Deck Plan Proposal</div>
            <div className="bg-[#23242b] p-4 rounded-lg text-blue-200 whitespace-pre-line mb-4">{proposalEdit !== null ? (
              <textarea className="w-full min-h-[120px] bg-[#23242b] text-white rounded-lg p-2 border border-[#23242b]" value={proposalEdit} onChange={e => setProposalEdit(e.target.value)} />
            ) : proposal}
            </div>
            {proposalEdit !== null ? (
              <Button variant="default" className="w-full" onClick={handleSubmitProposalEdit}>Submit Edits</Button>
            ) : (
              <div className="flex gap-2">
                <Button variant="default" className="flex-1" onClick={handleApproveProposal}>Approve & Generate Deck</Button>
                <Button variant="secondary" className="flex-1" onClick={handleEditProposal}>Edit Proposal</Button>
              </div>
            )}
          </Modal>
        )}
        {showValidationModal && validation && (
          <Modal open={showValidationModal} onClose={() => setShowValidationModal(false)}>
            <div className="text-white font-grotesk text-xl mb-4">AI Feedback on Deck Plan</div>
            <div className="bg-[#23242b] p-4 rounded-lg text-blue-200 whitespace-pre-line mb-4">{validation}</div>
            <Button variant="default" className="w-full" onClick={() => setShowProposalModal(true)}>Revise Plan</Button>
          </Modal>
        )}
        {/* Feedback Loop UI */}
        <div className="mt-8 bg-[#23242b] rounded-xl p-4">
          <div className="text-blue-200 mb-2">Give feedback to improve your deck (up to 20 rounds):</div>
          <div className="flex gap-2 mb-2">
            <input
              className="flex-1 bg-[#181A20] text-white rounded p-2"
              value={feedbackInput}
              onChange={e => setFeedbackInput(e.target.value)}
              placeholder="E.g. Make the executive summary more concise, add a slide about Q2 revenue, etc."
              disabled={feedbackLoading || feedbacks.length >= 20}
            />
            <button
              className="bg-blue-600 text-white px-4 py-2 rounded"
              onClick={handleFeedbackSubmit}
              disabled={feedbackLoading || !feedbackInput.trim() || feedbacks.length >= 20}
            >
              {feedbackLoading ? 'Refining...' : 'Submit Feedback'}
            </button>
          </div>
          <div className="text-xs text-blue-400 mb-2">Feedback rounds used: {feedbacks.length} / 20</div>
          <ul className="text-blue-300 text-xs list-disc list-inside">
            {feedbacks.map((fb, i) => (
              <li key={i}>{fb}</li>
            ))}
          </ul>
        </div>
      </main>
    </div>
  )
}