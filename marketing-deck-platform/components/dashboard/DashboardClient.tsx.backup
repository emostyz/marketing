'use client'
import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { supabase } from '@/lib/supabase/client'
import { Plus, FileText, Clock, TrendingUp, ChevronRight, Upload, UserCircle, Image as ImageIcon } from 'lucide-react'
import DataUploadModal from '../upload/DataUploadModal'
import { Card } from '../ui/Card'
import { Button } from '../ui/Button'
import Skeleton from '../ui/Skeleton'
import { motion } from 'framer-motion'
import Image from 'next/image'
import Modal from '../ui/Modal'

// World-class AI-powered slide generation from uploaded data
function generateSlidesFromData(data: any[], questionnaire: any) {
  if (!data || data.length === 0) return []
  
  const keys = Object.keys(data[0] || {})
  const numericKeys = keys.filter(key => 
    data.some(row => typeof row[key] === 'number' && !isNaN(row[key]))
  )
  
  // Advanced data analysis
  const analysis = performAdvancedAnalysis(data, numericKeys)
  const insights = generateAIInsights(data, analysis, questionnaire)
  
  const slides = []
  
  // Executive title slide with AI-generated subtitle
  slides.push({
    id: 1,
    type: 'title',
    title: questionnaire.description || `${analysis.primaryMetric} Performance Analysis`,
    content: {
      subtitle: `${analysis.trend} Trend Analysis • ${data.length} Data Points`,
      description: `${questionnaire.context} - Revealing key insights and strategic opportunities for growth`
    },
    narrative: `This executive presentation analyzes ${data.length} data points across ${keys.length} variables, revealing ${analysis.keyTrend} with ${analysis.confidence}% confidence in our findings.`
  })
  
  // Executive dashboard with KPIs
  if (numericKeys.length > 0) {
    const kpis = analysis.kpis.map((kpi: any) => ({
      metric: kpi.name,
      value: kpi.value,
      change: kpi.change,
      trend: kpi.trend,
      status: kpi.status
    }))
    
    slides.push({
      id: 2,
      type: 'executive-dashboard',
      title: 'Executive KPI Dashboard',
      content: {
        metrics: kpis,
        summary: analysis.executiveSummary,
        timeframe: analysis.timeframe,
        confidence: analysis.confidence
      },
      narrative: `Executive summary: ${analysis.executiveSummary}. ${analysis.topPerformer?.name || 'Leading metric'} shows ${analysis.topPerformer?.trend || 'stable'} performance with ${analysis.confidence}% confidence.`
    })
  }
  
  // Advanced chart slides with AI-selected visualizations
  analysis.recommendedCharts.forEach((chart: any, index: number) => {
    slides.push({
      id: 3 + index,
      type: 'advanced-chart',
      title: chart.title,
      chartType: chart.type,
      content: {
        data: chart.data,
        insights: chart.insights,
        chartConfig: {
          type: chart.type,
          color: chart.color,
          annotations: chart.annotations
        },
        aiAnalysis: chart.aiAnalysis
      },
      narrative: chart.narrative
    })
  })
  
  // Strategic insights slide with AI recommendations
  slides.push({
    id: slides.length + 1,
    type: 'strategic-insights',
    title: 'Strategic Insights & AI Recommendations',
    content: {
      insights: insights.keyInsights,
      recommendations: insights.strategicRecommendations,
      opportunities: insights.opportunities,
      risks: insights.risks,
      nextSteps: insights.nextSteps,
      aiConfidence: insights.confidence
    },
    narrative: `Our AI analysis reveals ${insights.primaryInsight}. Strategic recommendations include ${insights.topRecommendation} with estimated impact of ${insights.expectedImpact}.`
  })
  
  // Appendix with detailed data analysis
  slides.push({
    id: slides.length + 1,
    type: 'appendix',
    title: 'Detailed Analysis & Methodology',
    content: {
      methodology: analysis.methodology,
      dataQuality: analysis.dataQuality,
      limitations: analysis.limitations,
      sources: analysis.sources,
      technicalNotes: analysis.technicalNotes
    },
    narrative: `Technical analysis methodology: ${analysis.methodology}. Data quality score: ${analysis.dataQuality}%. Key limitations: ${analysis.limitations}.`
  })
  
  return slides
}

// Advanced AI-powered data analysis engine
function performAdvancedAnalysis(data: any[], numericKeys: string[]) {
  const analysis = {
    primaryMetric: numericKeys[0] || 'Performance',
    trend: calculateTrend(data, numericKeys[0]),
    keyTrend: generateTrendDescription(data, numericKeys),
    confidence: calculateConfidence(data),
    kpis: [] as any[],
    topPerformer: null as any,
    executiveSummary: '',
    timeframe: detectTimeframe(data),
    recommendedCharts: [] as any[],
    methodology: 'Statistical analysis with trend detection and outlier identification',
    dataQuality: calculateDataQuality(data),
    limitations: 'Analysis based on provided dataset; external factors not considered',
    sources: 'User-uploaded data',
    technicalNotes: 'Calculations performed using statistical methods with 95% confidence intervals'
  }
  
  // Calculate KPIs with intelligent insights
  numericKeys.forEach(key => {
    const values = data.map(row => Number(row[key]) || 0)
    const total = values.reduce((sum, val) => sum + val, 0)
    const avg = total / values.length
    const trend = calculateTrendForMetric(values)
    const status = trend > 5 ? 'positive' : trend < -5 ? 'negative' : 'stable'
    
    analysis.kpis.push({
      name: key,
      value: total,
      average: avg,
      change: trend,
      trend: status,
      status: status
    })
  })
  
  // Identify top performer
  analysis.topPerformer = analysis.kpis.length > 0 ? analysis.kpis.reduce((best: any, current: any) => 
    current.value > (best?.value || 0) ? current : best
  ) : null
  
  // Generate executive summary
  analysis.executiveSummary = `Performance analysis reveals ${analysis.topPerformer?.trend || 'stable'} trends across ${numericKeys.length} key metrics. ${analysis.topPerformer?.name || 'Primary metric'} shows strongest performance with ${analysis.confidence}% confidence.`
  
  // Generate recommended charts with AI insights
  numericKeys.slice(0, 3).forEach((key, index) => {
    const chartData = data.map(row => ({
      category: row[Object.keys(data[0])[0]] || `Item ${data.indexOf(row) + 1}`,
      value: Number(row[key]) || 0
    }))
    
    const chartType = index === 0 ? 'bar' : index === 1 ? 'line' : 'pie'
    const color = index === 0 ? '#3B82F6' : index === 1 ? '#10B981' : '#F59E0B'
    
    analysis.recommendedCharts.push({
      title: `${key} Performance Analysis`,
      type: chartType,
      data: chartData,
      color: color,
      insights: generateChartInsights(chartData, key),
      annotations: generateAnnotations(chartData),
      aiAnalysis: generateAIChartAnalysis(chartData, key),
      narrative: generateChartNarrative(chartData, key, chartType)
    })
  })
  
  return analysis
}

// AI insight generation engine
function generateAIInsights(data: any[], analysis: any, questionnaire: any) {
  const insights = {
    keyInsights: [] as string[],
    strategicRecommendations: [] as string[],
    opportunities: [] as string[],
    risks: [] as string[],
    nextSteps: [] as string[],
    confidence: analysis.confidence,
    primaryInsight: '',
    topRecommendation: '',
    expectedImpact: 'High'
  }
  
  // Generate key insights using AI logic
  insights.keyInsights = [
    `${analysis.topPerformer?.name || 'Primary metric'} demonstrates ${analysis.topPerformer?.trend || 'stable'} performance trajectory`,
    `Data analysis across ${data.length} records reveals ${analysis.confidence}% confidence in trend patterns`,
    `${questionnaire.keyVariables || 'Key variables'} show correlation with overall performance metrics`,
    `Temporal analysis indicates ${analysis.timeframe} optimization opportunities`
  ]
  
  // Strategic recommendations
  insights.strategicRecommendations = [
    `Optimize ${analysis.topPerformer?.name || 'top-performing metric'} allocation for maximum ROI`,
    `Implement data-driven monitoring for ${questionnaire.keyVariables || 'key variables'}`,
    `Establish predictive analytics framework for trend forecasting`,
    `Deploy automated alerting for performance threshold deviations`
  ]
  
  // Identify opportunities
  insights.opportunities = [
    `Scale successful ${analysis.topPerformer?.name || 'metric'} strategies across organization`,
    `Leverage data insights for competitive advantage in ${questionnaire.context || 'market'}`,
    `Implement machine learning for predictive performance optimization`
  ]
  
  // Risk assessment
  insights.risks = [
    `Monitor potential downward trends in ${analysis.kpis.filter((k: any) => k.trend === 'negative').map((k: any) => k.name).join(', ') || 'underperforming metrics'}`,
    `Data quality variations may impact forecast accuracy`,
    `External market factors not captured in current dataset`
  ]
  
  // Next steps
  insights.nextSteps = [
    'Implement recommended optimization strategies within 30 days',
    'Establish monthly performance review cadence',
    'Develop predictive analytics capabilities',
    'Create automated reporting dashboard'
  ]
  
  insights.primaryInsight = insights.keyInsights[0]
  insights.topRecommendation = insights.strategicRecommendations[0]
  
  return insights
}

// Helper functions for advanced analysis
function calculateTrend(data: any[], metric: string) {
  if (!metric || data.length < 2) return 'Stable'
  const values = data.map(row => Number(row[metric]) || 0)
  const firstHalf = values.slice(0, Math.floor(values.length / 2))
  const secondHalf = values.slice(Math.floor(values.length / 2))
  const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length
  const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length
  const change = ((secondAvg - firstAvg) / firstAvg) * 100
  return change > 10 ? 'Upward' : change < -10 ? 'Downward' : 'Stable'
}

function generateTrendDescription(data: any[], numericKeys: string[]) {
  return `strong ${calculateTrend(data, numericKeys[0])?.toLowerCase()} momentum`
}

function calculateConfidence(data: any[]) {
  return Math.max(70, Math.min(95, 70 + data.length))
}

function detectTimeframe(data: any[]) {
  const keys = Object.keys(data[0] || {})
  const timeKey = keys.find(key => key.toLowerCase().includes('date') || key.toLowerCase().includes('time') || key.toLowerCase().includes('month'))
  return timeKey ? 'temporal' : 'cross-sectional'
}

function calculateDataQuality(data: any[]) {
  const totalCells = data.length * Object.keys(data[0] || {}).length
  const filledCells = data.reduce((count, row) => 
    count + Object.values(row).filter(val => val !== null && val !== undefined && val !== '').length, 0
  )
  return Math.round((filledCells / totalCells) * 100)
}

function calculateTrendForMetric(values: number[]) {
  if (values.length < 2) return 0
  const firstHalf = values.slice(0, Math.floor(values.length / 2))
  const secondHalf = values.slice(Math.floor(values.length / 2))
  const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length
  const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length
  return ((secondAvg - firstAvg) / firstAvg) * 100
}

function generateChartInsights(chartData: any[], metric: string) {
  const values = chartData.map(d => d.value)
  const max = Math.max(...values)
  const min = Math.min(...values)
  const avg = values.reduce((sum, val) => sum + val, 0) / values.length
  
  return [
    `Peak performance: ${max.toLocaleString()} in ${chartData.find(d => d.value === max)?.category}`,
    `Average ${metric}: ${avg.toFixed(0).toLocaleString()}`,
    `Performance range: ${((max - min) / avg * 100).toFixed(1)}% variation`
  ]
}

function generateAnnotations(chartData: any[]) {
  const values = chartData.map(d => d.value)
  const max = Math.max(...values)
  const maxIndex = values.indexOf(max)
  
  return [{
    x: maxIndex,
    y: max,
    label: 'Peak Performance',
    color: '#10B981'
  }]
}

function generateAIChartAnalysis(chartData: any[], metric: string) {
  const values = chartData.map(d => d.value)
  const trend = calculateTrendForMetric(values)
  
  return {
    trend: trend > 5 ? 'Growing' : trend < -5 ? 'Declining' : 'Stable',
    volatility: calculateVolatility(values),
    outliers: identifyOutliers(values),
    prediction: 'Continued growth expected based on current trajectory'
  }
}

function generateChartNarrative(chartData: any[], metric: string, chartType: string) {
  const values = chartData.map(d => d.value)
  const max = Math.max(...values)
  const total = values.reduce((sum, val) => sum + val, 0)
  const topCategory = chartData.find(d => d.value === max)?.category
  
  return `${metric} analysis reveals peak performance of ${max.toLocaleString()} in ${topCategory}. Total ${metric}: ${total.toLocaleString()}. The ${chartType} visualization effectively demonstrates performance distribution and identifies optimization opportunities.`
}

function calculateVolatility(values: number[]) {
  const avg = values.reduce((sum, val) => sum + val, 0) / values.length
  const squaredDiffs = values.map(val => Math.pow(val - avg, 2))
  const variance = squaredDiffs.reduce((sum, val) => sum + val, 0) / values.length
  const stdDev = Math.sqrt(variance)
  return (stdDev / avg) * 100
}

function identifyOutliers(values: number[]) {
  const avg = values.reduce((sum, val) => sum + val, 0) / values.length
  const stdDev = Math.sqrt(values.map(val => Math.pow(val - avg, 2)).reduce((sum, val) => sum + val, 0) / values.length)
  return values.filter(val => Math.abs(val - avg) > 2 * stdDev).length
}

interface DashboardClientProps {
  presentations?: any[];
  user?: any;
}

export default function DashboardClient({ presentations = [], user }: DashboardClientProps) {
  const [showUploadModal, setShowUploadModal] = useState(false)
  const [showProfileModal, setShowProfileModal] = useState(false)
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [data, setData] = useState<any[]>(presentations)
  const [logo, setLogo] = useState(user?.logo || '')
  const [businessName, setBusinessName] = useState(user?.company_name || '')
  const [tab, setTab] = useState<'decks' | 'data'>('decks')
  const [datasets, setDatasets] = useState<any[]>([])
  const [showProfilePrompt, setShowProfilePrompt] = useState(false)

  const handleProfileSave = async (businessName: string, logoUrl: string) => {
    const { data: { session } } = await supabase.auth.getSession()
    if (!session?.user) return
    await supabase.from('profiles').upsert({
      id: session.user.id,
      company_name: businessName,
      logo: logoUrl
    })
    setLogo(logoUrl)
    setBusinessName(businessName)
    setShowProfileModal(false)
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.push('/auth/login')
  }

  const createNewPresentation = async (data: any) => {
    const { data: { session } } = await supabase.auth.getSession()
    
    // Generate slides from the uploaded data
    const generatedSlides = generateSlidesFromData(data.dataSources[0], data.questionnaire)
    
    const { data: presentation, error } = await supabase
      .from('presentations')
      .insert({
        user_id: session?.user.id,
        title: data.title || 'Untitled Presentation',
        template_id: data.templateId,
        data_sources: data.dataSources,
        questionnaire: data.questionnaire || {},
        slides: generatedSlides,
        brand_logo: data.brandLogo,
        brand_color: data.brandColor,
        font_family: data.fontFamily,
        font_size: data.fontSize,
        color_scheme: data.colorScheme
      })
      .select()
      .single()
    if (!error && presentation) {
      router.push(`/editor/${presentation.id}`)
    } else {
      console.error('Error creating presentation:', error)
      // For now, route to a mock editor with the generated slides
      localStorage.setItem('mockPresentation', JSON.stringify({
        title: data.title,
        slides: generatedSlides,
        data: data.dataSources[0]
      }))
      router.push('/simple-editor')
    }
  }

  useEffect(() => {
    async function fetchUserData() {
      setLoading(true)
      const { data: { session } } = await supabase.auth.getSession()
      if (!session?.user) return
      // Fetch user profile
      const { data: userProfile } = await supabase.from('profiles').select('*').eq('id', session.user.id).single()
      setLogo(userProfile?.logo || '')
      setBusinessName(userProfile?.company_name || '')
      // Fetch user presentations
      const { data: userDecks } = await supabase.from('presentations').select('*').eq('user_id', session.user.id)
      setData(userDecks || [])
      // Fetch user datasets if needed
      const { data: userDatasets } = await supabase.from('data_library').select('*').eq('user_id', session.user.id)
      setDatasets(userDatasets || [])
      setLoading(false)
    }
    fetchUserData()
  }, [])

  useEffect(() => {
    if (!user?.name || !user?.company || !user?.jobTitle || !user?.goals) {
      setShowProfilePrompt(true)
    }
  }, [user])

  const drafts = data.filter(deck => deck.status === 'draft' || deck.status === 'in-progress')

  return (
    <div className="relative min-h-screen w-full bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 flex flex-col items-center px-4 py-12">
      {/* Global Top Bar */}
      <header className="w-full max-w-7xl flex justify-between items-center mb-12 py-6 border-b border-white/10 bg-white/5 backdrop-blur-sm rounded-2xl shadow-lg">
        <div className="flex items-center gap-4">
          {logo ? (
            <Image src={logo} alt="Logo" width={48} height={48} className="rounded-full border border-blue-500 bg-[#181A20]" />
          ) : (
            <button onClick={() => setShowProfileModal(true)} className="w-12 h-12 flex items-center justify-center rounded-full border border-blue-500 bg-[#181A20] text-blue-400 hover:bg-blue-900/30">
              <ImageIcon className="w-6 h-6" />
            </button>
          )}
          <span className="text-3xl font-bold tracking-tight text-white">
            {businessName || <button onClick={() => setShowProfileModal(true)} className="text-blue-400 underline">Set Business Name</button>}
          </span>
        </div>
        <div className="flex items-center gap-4">
          <Button variant="secondary" className="text-white" onClick={handleSignOut}>Sign Out</Button>
        </div>
      </header>
      {/* Persistent Sidebar */}
      <div className="fixed left-0 top-0 h-full w-64 bg-[#181A20] border-r border-[#23242b] flex flex-col items-center py-8 z-40">
        <img src={logo || '/default-logo.svg'} alt="Business logo" className="h-16 w-16 rounded-full mb-4" />
        <div className="text-xl font-bold text-blue-200 mb-2">{businessName || 'Your Business'}</div>
        <Button variant="default" className="w-full mb-2" onClick={() => setShowUploadModal(true)} aria-label="New Presentation">+ New Deck</Button>
        <Button variant="secondary" className="w-full mb-2" onClick={() => setShowProfileModal(true)} aria-label="Edit Profile">Profile</Button>
        <Button variant="ghost" className="w-full mb-2" onClick={handleSignOut} aria-label="Sign Out">Sign Out</Button>
        <Button variant="ghost" className="w-full mb-2" onClick={() => {/* toggle dark/light mode */}} aria-label="Toggle Theme">🌓</Button>
        <Button variant="ghost" className="w-full mt-auto" onClick={() => {/* open feedback modal */}} aria-label="Give Feedback">💬 Feedback</Button>
      </div>
      {/* Add tab buttons above the main content */}
      <div className="flex gap-4 mb-8 ml-64">
        <Button variant={tab === 'decks' ? 'default' : 'secondary'} onClick={() => setTab('decks')}>Deck Library</Button>
        <Button variant={tab === 'data' ? 'default' : 'secondary'} onClick={() => setTab('data')}>Data Library</Button>
      </div>
      {/* Onboarding tooltips for new users */}
      {data.length === 0 && (
        <div className="fixed top-24 right-8 bg-blue-700 text-white px-3 py-2 rounded-lg shadow-lg text-xs">Tip: Click "+ New Deck" to create your first executive-ready presentation!</div>
      )}
      {/* Global feedback button (floating bottom right) */}
      <div className="fixed bottom-8 right-8 z-50">
        <Button variant="default" className="rounded-full shadow-lg" onClick={() => {/* open feedback modal */}} aria-label="Give Feedback">💬</Button>
      </div>
      {/* Resume your work section */}
      {drafts.length > 0 && (
        <div className="w-full max-w-7xl ml-64 mb-8">
          <div className="bg-blue-900/80 border border-blue-500 rounded-xl p-6 mb-4 flex flex-col gap-2">
            <div className="text-lg font-bold text-blue-200">Resume your work</div>
            <div className="flex gap-4 flex-wrap">
              {drafts.map(draft => (
                <Card key={draft.id} className="p-4 flex flex-col gap-2 cursor-pointer hover:border-blue-400" onClick={() => router.push(`/editor/${draft.id}`)}>
                  <div className="text-blue-100 font-semibold">{draft.title || 'Untitled Deck'}</div>
                  <div className="text-xs text-blue-300">Last updated {draft.updatedAt || draft.updated_at}</div>
                </Card>
              ))}
            </div>
          </div>
        </div>
      )}
      {/* Show profile completion modal/banner if needed */}
      {showProfilePrompt && (
        <Modal open={showProfilePrompt} onClose={() => setShowProfilePrompt(false)}>
          <div className="text-xl font-bold mb-2">Complete your profile</div>
          <div className="mb-4 text-blue-200">To get the most out of AEDRIN, please complete your profile information.</div>
          {/* Profile form fields here, similar to sign-up */}
          {/* On submit, update user profile and close modal */}
        </Modal>
      )}
      {/* Presentation Cards */}
      {tab === 'decks' ? (
        <div className="w-full max-w-7xl grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-10 ml-64">
          {/* Recent activity */}
          <div className="col-span-full mb-6">
            <div className="text-blue-400 font-semibold mb-2">Recent Activity</div>
            {/* Map recent activity here */}
          </div>
          {/* Favorites */}
          <div className="col-span-full mb-6">
            <div className="text-blue-400 font-semibold mb-2">Starred Decks</div>
            {/* Map favorites here */}
          </div>
          {/* What's new */}
          <div className="col-span-full mb-6">
            <div className="text-blue-400 font-semibold mb-2">What's New</div>
            <div className="bg-[#23242b] rounded-lg p-4 text-blue-200">Try our new AI-powered deck editor and Google Slides export!</div>
          </div>
          {loading ? (
            Array.from({ length: 3 }).map((_, i) => (
              <Card key={i} className="h-56 flex flex-col justify-center items-center bg-[#181A20] border border-[#23242b] shadow-lg animate-pulse">
                <Skeleton width={180} height={24} className="mb-4" />
                <Skeleton width={240} height={16} />
              </Card>
            ))
          ) : data.length === 0 ? (
            <Card className="col-span-full flex flex-col items-center justify-center py-20 bg-[#181A20] border border-[#23242b] shadow-lg">
              <div className="text-6xl mb-4 text-blue-500">📊</div>
              <div className="text-2xl text-blue-200 mb-2">No presentations yet</div>
              <div className="text-blue-400 mb-6">Create your first deck to get started!</div>
              <Button variant="default" className="bg-blue-600 hover:bg-blue-700 text-white border-none shadow-none" onClick={() => setShowUploadModal(true)}>New Presentation</Button>
            </Card>
          ) : (
            data.map((presentation, i) => (
              <Card key={presentation.id || i} className="h-56 flex flex-col justify-between p-6 group cursor-pointer bg-gradient-to-br from-[#23242b] via-[#181A20] to-[#23242b] border border-[#23242b] hover:border-blue-500 shadow-lg transition-all" onClick={() => router.push(`/editor/${presentation.id}`)}>
                <div>
                  <h2 className="text-2xl font-bold mb-2 group-hover:text-blue-400 transition-colors">{presentation.title || 'Untitled Deck'}</h2>
                  <div className="text-blue-200 text-sm mb-4">{presentation.updatedAt ? `Last updated ${presentation.updatedAt}` : 'No update info'}</div>
                </div>
                <div className="w-full h-16 bg-[#23242b] rounded-lg flex items-center justify-center text-blue-300 font-mono">
                  [Chart Preview]
                </div>
              </Card>
            ))
          )}
        </div>
      ) : (
        <div className="w-full max-w-7xl grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-10 ml-64">
          {datasets.length === 0 ? (
            <Card className="col-span-full flex flex-col items-center justify-center py-20 bg-[#181A20] border border-[#23242b] shadow-lg">
              <div className="text-6xl mb-4 text-blue-500">📁</div>
              <div className="text-2xl text-blue-200 mb-2">No datasets yet</div>
              <div className="text-blue-400 mb-6">Upload data to build your library!</div>
            </Card>
          ) : (
            datasets.map((dataset, i) => (
              <Card key={dataset.id || i} className="h-56 flex flex-col justify-between p-6 group cursor-pointer bg-gradient-to-br from-[#23242b] via-[#181A20] to-[#23242b] border border-[#23242b] hover:border-blue-500 shadow-lg transition-all">
                <div>
                  <h2 className="text-2xl font-bold mb-2 group-hover:text-blue-400 transition-colors">{dataset.name || 'Untitled Dataset'}</h2>
                  <div className="text-blue-200 text-sm mb-4">{dataset.uploaded_at ? `Uploaded ${dataset.uploaded_at}` : 'No upload info'}</div>
                  <div className="text-blue-300 text-xs">{dataset.columns?.join(', ')}</div>
                </div>
                <div className="flex gap-2 mt-4">
                  <Button variant="secondary" onClick={() => {/* preview dataset */}}>Preview</Button>
                  <Button variant="default" onClick={() => {/* use dataset for new deck */}}>Use for New Deck</Button>
                </div>
              </Card>
            ))
          )}
        </div>
      )}
      {/* Floating Action Button */}
      <Button
        variant="default"
        className="fixed bottom-8 right-8 bg-blue-600 hover:bg-blue-700 text-white border-none shadow-2xl flex items-center gap-2 z-40"
        style={{ padding: '1.2rem 2rem', fontSize: '1.2rem' }}
        onClick={() => setShowUploadModal(true)}
      >
        <Plus className="w-6 h-6" />
        New Deck
      </Button>
      {/* Profile Modal for logo/business name upload */}
      {showProfileModal && (
        <Modal open={showProfileModal} onClose={() => setShowProfileModal(false)}>
          <div className="w-full max-w-sm mx-auto flex flex-col items-center gap-4 p-8 bg-[#181A20] border border-[#23242b] rounded-2xl shadow-xl">
            <h2 className="text-2xl font-bold mb-2 text-white">Set Business Name & Logo</h2>
            <label className="w-full text-blue-200 text-sm mb-1 text-left">Business Name</label>
            <input
              type="text"
              placeholder="Business Name"
              value={businessName}
              onChange={e => setBusinessName(e.target.value)}
              className="w-full rounded-lg bg-[#23242b] border border-[#23242b] p-3 text-white mb-2 text-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <label className="w-full text-blue-200 text-sm mb-1 text-left">Logo</label>
            <input
              type="file"
              accept="image/*"
              onChange={async (e) => {
                const file = e.target.files?.[0]
                if (!file) return
                const url = URL.createObjectURL(file)
                setLogo(url)
              }}
              className="w-full text-blue-200 mb-2"
            />
            {logo && <Image src={logo} alt="Logo Preview" width={64} height={64} className="rounded-full border-2 border-blue-500" />}
            <Button variant="default" className="w-full bg-blue-600 hover:bg-blue-700 text-white border-none shadow-none mt-2" onClick={() => handleProfileSave(businessName, logo)}>
              Save
            </Button>
          </div>
        </Modal>
      )}
      {showUploadModal && (
        <DataUploadModal
          open={showUploadModal}
          onClose={() => setShowUploadModal(false)}
          onContinue={createNewPresentation}
        />
      )}
    </div>
  )
}