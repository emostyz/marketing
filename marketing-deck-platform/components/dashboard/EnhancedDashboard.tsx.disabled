"use client"

import { useState, useEffect, useCallback, useMemo } from 'react'
import { useAuth } from '@/lib/auth/auth-context'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Brain, FileText, Upload, BarChart3, Settings, Users, Activity, Search, Clock, TrendingUp, AlertCircle, RefreshCw, ChevronRight, Calendar, Database, Zap } from 'lucide-react'
import { UserDataService, UserDataSummary, useUserDataService } from '@/lib/user-data-service'
import Link from 'next/link'

interface SearchResults {
  presentations: any[]
  files: any[]
  totalResults: number
}

interface DashboardState {
  dashboardData: UserDataSummary | null
  loading: boolean
  error: string | null
  searchQuery: string
  searchResults: SearchResults | null
  searchLoading: boolean
  recentActivity: any[]
  retryCount: number
  lastUpdated: Date | null
}

interface ErrorBoundaryState {
  hasError: boolean
  error: Error | null
}

export default function EnhancedDashboard() {
  const { user } = useAuth()
  const userDataService = useUserDataService()
  
  const [state, setState] = useState<DashboardState>({
    dashboardData: null,
    loading: true,
    error: null,
    searchQuery: '',
    searchResults: null,
    searchLoading: false,
    recentActivity: [],
    retryCount: 0,
    lastUpdated: null
  })

  const [errorBoundary, setErrorBoundary] = useState<ErrorBoundaryState>({
    hasError: false,
    error: null
  })

  // Safe state updater with error boundary
  const safeSetState = useCallback((updater: Partial<DashboardState>) => {
    try {
      setState(prev => ({ ...prev, ...updater }))
    } catch (error) {
      setErrorBoundary({ hasError: true, error: error as Error })
    }
  }, [])

  // Load dashboard data with comprehensive error handling
  const loadDashboardData = useCallback(async (retryAttempt = 0) => {
    if (!user || retryAttempt > 3) return

    try {
      safeSetState({ 
        loading: true, 
        error: null, 
        retryCount: retryAttempt 
      })

      const [dashboardResult, activityResult] = await Promise.allSettled([
        userDataService.getUserDashboardData(),
        userDataService.getRecentActivity(10)
      ])

      if (dashboardResult.status === 'fulfilled' && dashboardResult.value.success) {
        const recentActivity = activityResult.status === 'fulfilled' && activityResult.value.success 
          ? activityResult.value.data || []
          : []

        safeSetState({
          dashboardData: dashboardResult.value.data || null,
          recentActivity,
          loading: false,
          error: null,
          lastUpdated: new Date()
        })
      } else {
        const errorMessage = dashboardResult.status === 'fulfilled' 
          ? dashboardResult.value.error || 'Failed to load dashboard data'
          : 'Network error occurred'
        
        // Auto-retry with exponential backoff
        if (retryAttempt < 3) {
          setTimeout(() => loadDashboardData(retryAttempt + 1), Math.pow(2, retryAttempt) * 1000)
          safeSetState({ 
            error: `${errorMessage} (Retrying... ${retryAttempt + 1}/3)`,
            loading: false
          })
        } else {
          safeSetState({ 
            error: errorMessage,
            loading: false
          })
        }
      }
    } catch (error) {
      console.error('Critical error loading dashboard:', error)
      safeSetState({
        error: 'A critical error occurred. Please refresh the page.',
        loading: false
      })
    }
  }, [user, userDataService, safeSetState])

  // Search with debouncing and error handling
  const handleSearch = useCallback(async () => {
    const query = state.searchQuery.trim()
    if (!query) {
      safeSetState({ searchResults: null })
      return
    }

    try {
      safeSetState({ searchLoading: true })
      
      const result = await userDataService.globalSearch(query)
      
      if (result.success && result.data) {
        safeSetState({
          searchResults: {
            presentations: result.data.presentations || [],
            files: result.data.files || [],
            totalResults: result.data.totalResults || 0
          },
          searchLoading: false
        })
      } else {
        safeSetState({
          searchResults: { presentations: [], files: [], totalResults: 0 },
          searchLoading: false
        })
      }
    } catch (error) {
      console.error('Search error:', error)
      safeSetState({
        searchResults: null,
        searchLoading: false
      })
    }
  }, [state.searchQuery, userDataService, safeSetState])

  // Debounced search
  useEffect(() => {
    const timeoutId = setTimeout(handleSearch, 300)
    return () => clearTimeout(timeoutId)
  }, [state.searchQuery, handleSearch])

  // Load data on mount and user change
  useEffect(() => {
    if (user) {
      loadDashboardData()
    }
  }, [user, loadDashboardData])

  // Auto-refresh every 5 minutes
  useEffect(() => {
    const interval = setInterval(() => {
      if (user && !state.loading) {
        loadDashboardData()
      }
    }, 5 * 60 * 1000)

    return () => clearInterval(interval)
  }, [user, state.loading, loadDashboardData])

  // Utility functions with null safety
  const formatFileSize = useCallback((bytes: number): string => {
    if (!bytes || bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }, [])

  const formatDate = useCallback((dateString: string | Date): string => {
    if (!dateString) return 'Unknown'
    try {
      const date = typeof dateString === 'string' ? new Date(dateString) : dateString
      if (isNaN(date.getTime())) return 'Invalid date'
      
      return date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      })
    } catch {
      return 'Invalid date'
    }
  }, [])

  const formatTimeAgo = useCallback((dateString: string | Date): string => {
    if (!dateString) return 'Unknown'
    try {
      const date = typeof dateString === 'string' ? new Date(dateString) : dateString
      if (isNaN(date.getTime())) return 'Unknown'
      
      const now = new Date()
      const diffMs = now.getTime() - date.getTime()
      const diffMins = Math.floor(diffMs / 60000)
      const diffHours = Math.floor(diffMins / 60)
      const diffDays = Math.floor(diffHours / 24)

      if (diffMins < 1) return 'Just now'
      if (diffMins < 60) return `${diffMins}m ago`
      if (diffHours < 24) return `${diffHours}h ago`
      if (diffDays < 7) return `${diffDays}d ago`
      return formatDate(date)
    } catch {
      return 'Unknown'
    }
  }, [formatDate])

  // Memoized computed values
  const computedStats = useMemo(() => {
    if (!state.dashboardData) return null

    const { presentations, dataFiles, usageStats, recentActivity } = state.dashboardData
    return {
      totalPresentations: presentations?.total || 0,
      completionRate: presentations?.total > 0 
        ? Math.round((presentations.completed / presentations.total) * 100) 
        : 0,
      storageUsed: dataFiles?.totalSizeMB || 0,
      monthlyActivity: usageStats?.thisMonth?.presentationsCreated || 0,
      hasRecentActivity: Boolean(recentActivity?.lastPresentationEdit || recentActivity?.lastDataUpload)
    }
  }, [state.dashboardData])

  // Error boundary fallback
  if (errorBoundary.hasError) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 flex items-center justify-center p-6">
        <Card className="bg-red-900/20 border-red-700 max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="w-12 h-12 text-red-400 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-white mb-2">Something went wrong</h2>
            <p className="text-gray-400 mb-4">
              {errorBoundary.error?.message || 'An unexpected error occurred'}
            </p>
            <Button 
              onClick={() => window.location.reload()} 
              className="bg-red-600 hover:bg-red-700"
            >
              Reload Page
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Enhanced loading state with proper skeleton
  if (state.loading && !state.dashboardData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse">
            {/* Header skeleton */}
            <div className="mb-8">
              <div className="h-10 bg-gray-800 rounded w-1/3 mb-2"></div>
              <div className="h-5 bg-gray-800 rounded w-1/2"></div>
            </div>
            
            {/* Search skeleton */}
            <div className="mb-6">
              <div className="h-12 bg-gray-800 rounded"></div>
            </div>
            
            {/* Stats grid skeleton */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              {[...Array(4)].map((_, i) => (
                <Card key={i} className="bg-gray-900/50 border-gray-700">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-2">
                      <div className="h-4 bg-gray-800 rounded w-20"></div>
                      <div className="h-4 w-4 bg-gray-800 rounded"></div>
                    </div>
                    <div className="h-8 bg-gray-800 rounded w-16 mb-2"></div>
                    <div className="h-3 bg-gray-800 rounded w-24"></div>
                  </CardContent>
                </Card>
              ))}
            </div>
            
            {/* Main content skeleton */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <div className="lg:col-span-2">
                <Card className="bg-gray-900/50 border-gray-700">
                  <CardHeader>
                    <div className="h-6 bg-gray-800 rounded w-40"></div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {[...Array(3)].map((_, i) => (
                        <div key={i} className="h-20 bg-gray-800 rounded"></div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
              
              <div className="space-y-6">
                {[...Array(3)].map((_, i) => (
                  <Card key={i} className="bg-gray-900/50 border-gray-700">
                    <CardHeader>
                      <div className="h-6 bg-gray-800 rounded w-32"></div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {[...Array(2)].map((_, j) => (
                          <div key={j} className="h-16 bg-gray-800 rounded"></div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  // Enhanced error state
  if (state.error && !state.dashboardData) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 flex items-center justify-center p-6">
        <Card className="bg-gray-900/50 border-gray-700 max-w-md">
          <CardContent className="p-6 text-center">
            <AlertCircle className="w-12 h-12 text-red-400 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-white mb-2">Unable to load dashboard</h2>
            <p className="text-gray-400 mb-4">{state.error}</p>
            <div className="flex flex-col sm:flex-row gap-3">
              <Button 
                onClick={() => loadDashboardData()} 
                disabled={state.loading}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {state.loading ? (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                    Retrying...
                  </>
                ) : (
                  <>
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Try Again
                  </>
                )}
              </Button>
              <Button 
                variant="outline" 
                onClick={() => window.location.reload()}
                className="border-gray-600 text-gray-300 hover:bg-gray-700"
              >
                Refresh Page
              </Button>
            </div>
            {state.retryCount > 0 && (
              <p className="text-xs text-gray-500 mt-3">
                Retry attempt: {state.retryCount}/3
              </p>
            )}
          </CardContent>
        </Card>
      </div>
    )
  }

  // User not authenticated
  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 flex items-center justify-center p-6">
        <Card className="bg-gray-900/50 border-gray-700 max-w-md">
          <CardContent className="p-6 text-center">
            <Users className="w-12 h-12 text-blue-400 mx-auto mb-4" />
            <h2 className="text-xl font-bold text-white mb-2">Please sign in</h2>
            <p className="text-gray-400 mb-4">You need to be authenticated to view your dashboard</p>
            <Link href="/auth/login">
              <Button className="bg-blue-600 hover:bg-blue-700">
                Sign In
              </Button>
            </Link>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-950 via-gray-900 to-gray-950 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header with status indicator */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2 flex items-center">
                Welcome back{user?.name ? `, ${user.name}` : ''}!
                {state.loading && (
                  <RefreshCw className="w-6 h-6 ml-3 text-blue-400 animate-spin" />
                )}
              </h1>
              <p className="text-gray-400">
                Here's your comprehensive dashboard with all your presentations, data files, and activity
              </p>
            </div>
            <div className="flex items-center space-x-4">
              {state.lastUpdated && (
                <div className="text-xs text-gray-500 flex items-center">
                  <Clock className="w-3 h-3 mr-1" />
                  Updated {formatTimeAgo(state.lastUpdated)}
                </div>
              )}
              <Button
                variant="outline"
                size="sm"
                onClick={() => loadDashboardData()}
                disabled={state.loading}
                className="border-gray-600 text-gray-300 hover:bg-gray-700"
              >
                <RefreshCw className={`w-4 h-4 ${state.loading ? 'animate-spin' : ''}`} />
              </Button>
            </div>
          </div>
          
          {/* Error banner */}
          {state.error && state.dashboardData && (
            <div className="bg-yellow-900/50 border border-yellow-700 text-yellow-200 px-4 py-2 rounded-lg mb-4 flex items-center justify-between">
              <div className="flex items-center">
                <AlertCircle className="w-4 h-4 mr-2" />
                {state.error}
              </div>
              <Button
                size="sm"
                variant="outline"
                onClick={() => loadDashboardData()}
                className="border-yellow-600 text-yellow-300 hover:bg-yellow-800"
              >
                Retry
              </Button>
            </div>
          )}
        </div>

        {/* Enhanced Search Bar */}
        <div className="mb-6">
          <div className="relative">
            <input
              type="text"
              placeholder="Search presentations, data files, and content..."
              value={state.searchQuery}
              onChange={(e) => safeSetState({ searchQuery: e.target.value })}
              className="w-full px-4 py-3 pl-12 bg-gray-800 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              aria-label="Search dashboard content"
            />
            <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            {state.searchLoading && (
              <RefreshCw className="absolute right-4 top-1/2 transform -translate-y-1/2 w-4 h-4 text-blue-400 animate-spin" />
            )}
            {state.searchQuery && !state.searchLoading && (
              <button
                onClick={() => safeSetState({ searchQuery: '', searchResults: null })}
                className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-white"
                aria-label="Clear search"
              >
                ×
              </button>
            )}
          </div>
        </div>

        {/* Search Results */}
        {state.searchResults && (
          <Card className="mb-6 bg-gray-900/50 border-gray-700">
            <CardHeader>
              <CardTitle className="text-white flex items-center justify-between">
                <span>Search Results ({state.searchResults.totalResults} found)</span>
                <button
                  onClick={() => safeSetState({ searchResults: null, searchQuery: '' })}
                  className="text-gray-400 hover:text-white"
                  aria-label="Close search results"
                >
                  ×
                </button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {state.searchResults.totalResults > 0 ? (
                <>
                  {state.searchResults.presentations.length > 0 && (
                    <div className="mb-6">
                      <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
                        <FileText className="w-4 h-4 mr-2 text-blue-400" />
                        Presentations ({state.searchResults.presentations.length})
                      </h3>
                      <div className="space-y-3">
                        {state.searchResults.presentations.map((presentation: any) => (
                          <div key={presentation.id} className="p-4 bg-gray-800 rounded-lg hover:bg-gray-750 transition-colors">
                            <div className="flex items-center justify-between">
                              <div className="flex-1">
                                <h4 className="text-white font-medium">{presentation.title}</h4>
                                <p className="text-gray-400 text-sm mt-1">
                                  {presentation.description || 'No description'}
                                </p>
                                <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                                  <span>Last edited: {formatDate(presentation.lastEditedAt || presentation.updatedAt)}</span>
                                  <span>{presentation.slides?.length || 0} slides</span>
                                </div>
                              </div>
                              <div className="flex items-center space-x-2">
                                <span className={`text-xs px-2 py-1 rounded ${
                                  presentation.status === 'completed' ? 'bg-green-900 text-green-200' :
                                  presentation.status === 'draft' ? 'bg-blue-900 text-blue-200' :
                                  'bg-gray-700 text-gray-300'
                                }`}>
                                  {presentation.status}
                                </span>
                                <Link href={`/deck-builder/${presentation.id}`}>
                                  <Button size="sm" variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-700">
                                    <ChevronRight className="w-3 h-3" />
                                  </Button>
                                </Link>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                  
                  {state.searchResults.files.length > 0 && (
                    <div>
                      <h3 className="text-lg font-semibold text-white mb-3 flex items-center">
                        <Database className="w-4 h-4 mr-2 text-green-400" />
                        Data Files ({state.searchResults.files.length})
                      </h3>
                      <div className="space-y-3">
                        {state.searchResults.files.map((file: any) => (
                          <div key={file.id} className="p-4 bg-gray-800 rounded-lg hover:bg-gray-750 transition-colors">
                            <h4 className="text-white font-medium">{file.original_filename}</h4>
                            <p className="text-gray-400 text-sm mt-1">{file.description}</p>
                            <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                              <span>Uploaded: {formatDate(file.upload_date)}</span>
                              <span>{file.row_count || 0} rows</span>
                              <span>{formatFileSize(file.file_size_bytes || 0)}</span>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </>
              ) : (
                <div className="text-center py-8">
                  <Search className="w-12 h-12 text-gray-600 mx-auto mb-4" />
                  <p className="text-gray-400">No results found for "{state.searchQuery}"</p>
                  <p className="text-gray-500 text-sm mt-1">Try searching for presentation titles, descriptions, or file names</p>
                </div>
              )}
            </CardContent>
          </Card>
        )}

        {/* Enhanced Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <Card className="bg-gray-900/50 border-gray-700 hover:bg-gray-900/70 transition-colors">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Total Presentations</CardTitle>
              <FileText className="h-4 w-4 text-blue-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">
                {state.dashboardData?.presentations.total || 0}
              </div>
              <p className="text-xs text-gray-400">
                {state.dashboardData?.presentations.draft || 0} drafts, {state.dashboardData?.presentations.completed || 0} completed
              </p>
              {computedStats?.completionRate !== undefined && computedStats.completionRate > 0 && (
                <div className="mt-2">
                  <div className="w-full bg-gray-700 rounded-full h-1">
                    <div
                      className="bg-blue-500 h-1 rounded-full transition-all duration-300"
                      style={{ width: `${computedStats.completionRate}%` }}
                    />
                  </div>
                  <p className="text-xs text-gray-500 mt-1">{computedStats.completionRate}% completion rate</p>
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="bg-gray-900/50 border-gray-700 hover:bg-gray-900/70 transition-colors">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Data Storage</CardTitle>
              <Database className="h-4 w-4 text-green-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">
                {state.dashboardData?.dataFiles.total || 0}
              </div>
              <p className="text-xs text-gray-400">
                {(state.dashboardData?.dataFiles.totalSizeMB || 0).toFixed(1)} MB used
              </p>
              {(state.dashboardData?.dataFiles.totalSizeMB || 0) > 0 && (
                <div className="mt-2">
                  <div className="w-full bg-gray-700 rounded-full h-1">
                    <div
                      className="bg-green-500 h-1 rounded-full transition-all duration-300"
                      style={{ 
                        width: `${Math.min((state.dashboardData?.dataFiles.totalSizeMB || 0) / 100 * 100, 100)}%` 
                      }}
                    />
                  </div>
                  <p className="text-xs text-gray-500 mt-1">Storage usage</p>
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="bg-gray-900/50 border-gray-700 hover:bg-gray-900/70 transition-colors">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">This Month</CardTitle>
              <TrendingUp className="h-4 w-4 text-purple-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">
                {state.dashboardData?.usageStats.thisMonth.presentationsCreated || 0}
              </div>
              <p className="text-xs text-gray-400">
                {state.dashboardData?.usageStats.thisMonth.dataUploads || 0} uploads, {state.dashboardData?.usageStats.thisMonth.exports || 0} exports
              </p>
              <div className="flex items-center mt-2 text-xs">
                <Zap className="w-3 h-3 mr-1 text-purple-400" />
                <span className="text-gray-500">Monthly activity</span>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-900/50 border-gray-700 hover:bg-gray-900/70 transition-colors">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Last Activity</CardTitle>
              <Clock className="h-4 w-4 text-orange-400" />
            </CardHeader>
            <CardContent>
              <div className="text-sm font-bold text-white">
                {state.dashboardData?.recentActivity.lastPresentationEdit ? 
                  formatTimeAgo(state.dashboardData.recentActivity.lastPresentationEdit) : 
                  'No activity yet'
                }
              </div>
              <p className="text-xs text-gray-400">
                {state.dashboardData?.recentActivity.lastDataUpload ? 
                  `Data: ${formatTimeAgo(state.dashboardData.recentActivity.lastDataUpload)}` : 
                  'Start creating!'
                }
              </p>
              <div className="flex items-center mt-2 text-xs">
                <Calendar className="w-3 h-3 mr-1 text-orange-400" />
                <span className="text-gray-500">Recent timeline</span>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Recent Presentations */}
          <div className="lg:col-span-2">
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center justify-between">
                  <div className="flex items-center">
                    <FileText className="w-5 h-5 mr-2 text-blue-400" />
                    Recent Presentations
                  </div>
                  <Link href="/deck-builder/new">
                    <Button size="sm" className="bg-blue-600 hover:bg-blue-700">
                      <FileText className="w-4 h-4 mr-2" />
                      New
                    </Button>
                  </Link>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {state.dashboardData?.presentations.recentPresentations?.length > 0 ? (
                  <div className="space-y-4">
                    {state.dashboardData.presentations.recentPresentations.map((presentation: any) => (
                      <div key={presentation.id} className="flex items-center justify-between p-4 bg-gray-800/50 rounded-lg hover:bg-gray-800 transition-colors border border-gray-700/50">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3">
                            <div className={`w-3 h-3 rounded-full ${
                              presentation.status === 'completed' ? 'bg-green-500' :
                              presentation.status === 'draft' ? 'bg-blue-500' :
                              presentation.status === 'archived' ? 'bg-gray-500' :
                              'bg-yellow-500'
                            }`}></div>
                            <h3 className="text-white font-medium">{presentation.title}</h3>
                          </div>
                          <p className="text-gray-400 text-sm mt-1 ml-6">
                            {presentation.description || 'No description'}
                          </p>
                          <div className="flex items-center space-x-4 mt-2 ml-6 text-xs text-gray-500">
                            <span className="flex items-center">
                              <Calendar className="w-3 h-3 mr-1" />
                              {formatTimeAgo(presentation.lastEditedAt)}
                            </span>
                            <span className="flex items-center">
                              <FileText className="w-3 h-3 mr-1" />
                              {presentation.slides?.length || 0} slides
                            </span>
                            {presentation.dataSources?.length > 0 && (
                              <span className="flex items-center">
                                <Database className="w-3 h-3 mr-1" />
                                {presentation.dataSources.length} data sources
                              </span>
                            )}
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`text-xs px-2 py-1 rounded-full font-medium ${
                            presentation.status === 'completed' ? 'bg-green-900/50 text-green-300 border border-green-700' :
                            presentation.status === 'draft' ? 'bg-blue-900/50 text-blue-300 border border-blue-700' :
                            presentation.status === 'archived' ? 'bg-gray-700/50 text-gray-300 border border-gray-600' :
                            'bg-yellow-900/50 text-yellow-300 border border-yellow-700'
                          }`}>
                            {presentation.status}
                          </span>
                          <Link href={`/deck-builder/${presentation.id}`}>
                            <Button size="sm" variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-700">
                              <ChevronRight className="w-4 h-4" />
                            </Button>
                          </Link>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <div className="bg-gray-800/50 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4">
                      <FileText className="w-8 h-8 text-gray-600" />
                    </div>
                    <h3 className="text-white font-medium mb-2">No presentations yet</h3>
                    <p className="text-gray-400 text-sm mb-4">Create your first presentation to get started with AEDRIN</p>
                    <Link href="/deck-builder/new">
                      <Button className="bg-blue-600 hover:bg-blue-700">
                        <FileText className="w-4 h-4 mr-2" />
                        Create Your First Presentation
                      </Button>
                    </Link>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Recent Data Files */}
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center justify-between">
                  <div className="flex items-center">
                    <Database className="w-5 h-5 mr-2 text-green-400" />
                    Recent Data Files
                  </div>
                  <Link href="/upload">
                    <Button size="sm" variant="outline" className="border-gray-600 text-gray-300 hover:bg-gray-700">
                      <Upload className="w-4 h-4 mr-2" />
                      Upload
                    </Button>
                  </Link>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {state.dashboardData?.dataFiles.recentFiles?.length > 0 ? (
                  <div className="space-y-3">
                    {state.dashboardData.dataFiles.recentFiles.map((file: any) => (
                      <div key={file.id} className="p-3 bg-gray-800/50 rounded-lg hover:bg-gray-800 transition-colors border border-gray-700/50">
                        <div className="flex items-start justify-between">
                          <div className="flex-1">
                            <h4 className="text-white font-medium text-sm">{file.original_filename}</h4>
                            <p className="text-gray-400 text-xs mt-1 line-clamp-2">
                              {file.description.length > 60 ? `${file.description.substring(0, 60)}...` : file.description}
                            </p>
                          </div>
                          <div className="ml-2">
                            <span className="text-xs bg-green-900/50 text-green-300 px-2 py-1 rounded border border-green-700">
                              CSV
                            </span>
                          </div>
                        </div>
                        <div className="flex items-center justify-between mt-3 text-xs text-gray-500">
                          <span className="flex items-center">
                            <Calendar className="w-3 h-3 mr-1" />
                            {formatDate(file.upload_date || '')}
                          </span>
                          <div className="flex items-center space-x-3">
                            <span>{file.row_count || 0} rows</span>
                            <span>{formatFileSize(file.file_size_bytes || 0)}</span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="bg-gray-800/50 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3">
                      <Database className="w-6 h-6 text-gray-600" />
                    </div>
                    <h4 className="text-white font-medium text-sm mb-2">No data files yet</h4>
                    <p className="text-gray-400 text-xs mb-3">Upload CSV files to power your presentations</p>
                    <Link href="/upload">
                      <Button size="sm" className="bg-green-600 hover:bg-green-700">
                        <Upload className="w-4 h-4 mr-2" />
                        Upload First File
                      </Button>
                    </Link>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* User Context & Preferences */}
            {(state.dashboardData?.userContext.presentationStyle || 
              state.dashboardData?.userContext.industry || 
              state.dashboardData?.userContext.primaryGoal) && (
              <Card className="bg-gray-900/50 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white flex items-center">
                    <Settings className="w-5 h-5 mr-2 text-purple-400" />
                    Your Preferences
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {state.dashboardData.userContext.industry && (
                    <div className="flex items-center justify-between">
                      <div className="text-xs text-gray-400">Industry</div>
                      <div className="text-white text-sm font-medium">{state.dashboardData.userContext.industry}</div>
                    </div>
                  )}
                  {state.dashboardData.userContext.primaryGoal && (
                    <div className="flex items-center justify-between">
                      <div className="text-xs text-gray-400">Primary Goal</div>
                      <div className="text-white text-sm font-medium">{state.dashboardData.userContext.primaryGoal}</div>
                    </div>
                  )}
                  {state.dashboardData.userContext.presentationStyle && (
                    <div className="flex items-center justify-between">
                      <div className="text-xs text-gray-400">Style</div>
                      <div className="text-white text-sm font-medium">{state.dashboardData.userContext.presentationStyle}</div>
                    </div>
                  )}
                  {state.dashboardData.userContext.dataTypes && state.dashboardData.userContext.dataTypes.length > 0 && (
                    <div>
                      <div className="text-xs text-gray-400 mb-2">Data Types</div>
                      <div className="flex flex-wrap gap-1">
                        {state.dashboardData.userContext.dataTypes.slice(0, 3).map((type: string) => (
                          <span key={type} className="text-xs bg-gray-700/50 text-gray-300 px-2 py-1 rounded border border-gray-600">
                            {type}
                          </span>
                        ))}
                        {state.dashboardData.userContext.dataTypes.length > 3 && (
                          <span className="text-xs text-gray-500">+{state.dashboardData.userContext.dataTypes.length - 3} more</span>
                        )}
                      </div>
                    </div>
                  )}
                  <Link href="/profile">
                    <Button size="sm" variant="outline" className="w-full border-gray-600 text-gray-300 hover:bg-gray-700">
                      <Settings className="w-4 h-4 mr-2" />
                      Update Preferences
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            )}

            {/* Recent Activity Feed */}
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <Activity className="w-5 h-5 mr-2 text-orange-400" />
                  Recent Activity
                </CardTitle>
              </CardHeader>
              <CardContent>
                {state.recentActivity.length > 0 ? (
                  <div className="space-y-3">
                    {state.recentActivity.slice(0, 5).map((activity: any, index: number) => (
                      <div key={index} className="flex items-start space-x-3">
                        <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${
                          activity.type === 'presentation' ? 'bg-blue-400' : 'bg-green-400'
                        }`}></div>
                        <div className="flex-1 min-w-0">
                          <div className="text-white text-sm">
                            {activity.action === 'edited' ? 'Edited' : 
                             activity.action === 'completed' ? 'Completed' : 
                             activity.action === 'uploaded' ? 'Uploaded' : 'Updated'}{' '}
                            <span className="font-medium">{activity.title}</span>
                          </div>
                          <div className="text-gray-500 text-xs flex items-center mt-1">
                            <Clock className="w-3 h-3 mr-1" />
                            {formatTimeAgo(activity.timestamp)}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-6">
                    <div className="bg-gray-800/50 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3">
                      <Activity className="w-6 h-6 text-gray-600" />
                    </div>
                    <h4 className="text-white font-medium text-sm mb-1">No recent activity</h4>
                    <p className="text-gray-400 text-xs">Your activity will appear here</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Quick Actions */}
            <Card className="bg-gray-900/50 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white">Quick Actions</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <Link href="/deck-builder/new">
                    <Button className="w-full bg-blue-600 hover:bg-blue-700 text-white justify-start">
                      <FileText className="w-4 h-4 mr-3" />
                      New Presentation
                    </Button>
                  </Link>
                  <Link href="/upload">
                    <Button className="w-full bg-green-600 hover:bg-green-700 text-white justify-start">
                      <Upload className="w-4 h-4 mr-3" />
                      Upload Data
                    </Button>
                  </Link>
                  <Link href="/profile">
                    <Button variant="outline" className="w-full border-gray-600 text-gray-300 hover:bg-gray-700 justify-start">
                      <Settings className="w-4 h-4 mr-3" />
                      Profile Settings
                    </Button>
                  </Link>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
} 